package leetcode.leetcode22xx.leetcode2267;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertTrue;

class SolutionTest {

    @Test
    void test() {
        Solution solution = new Solution();
        char[][] grid = {
                {'(', '(', ')', ')', '(', ')', '(', ')', ')', '(', '(', ')', '(', ')', ')', ')', ')', ')', '(', ')', '(', ')', ')', '(', '(', '(', '(', ')', '(', ')', ')', ')', '(', ')', ')', ')', '(', ')', '(', ')', '(', '(', '(', ')'},
                {'(', ')', '(', '(', '(', ')', ')', ')', ')', '(', '(', '(', '(', ')', ')', ')', '(', '(', ')', '(', '(', ')', ')', '(', '(', ')', '(', '(', '(', ')', '(', '(', ')', '(', ')', '(', ')', '(', '(', '(', '(', ')', ')', '('},
                {'(', ')', ')', '(', ')', '(', ')', '(', ')', ')', ')', '(', '(', '(', ')', ')', '(', ')', ')', '(', '(', ')', ')', '(', '(', ')', '(', ')', '(', '(', '(', '(', '(', '(', ')', '(', ')', ')', ')', ')', '(', '(', '(', ')'},
                {')', '(', '(', ')', '(', '(', ')', '(', ')', '(', '(', ')', ')', ')', '(', ')', '(', '(', ')', '(', '(', '(', '(', '(', '(', ')', ')', '(', ')', ')', '(', ')', '(', '(', ')', ')', ')', ')', '(', '(', '(', '(', ')', ')'},
                {')', ')', ')', '(', '(', '(', '(', ')', '(', '(', ')', '(', ')', ')', ')', ')', ')', '(', ')', '(', ')', '(', '(', ')', '(', '(', '(', ')', ')', '(', '(', ')', '(', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '('},
                {'(', '(', '(', ')', '(', '(', '(', ')', ')', ')', ')', ')', '(', '(', '(', '(', ')', ')', ')', '(', ')', '(', ')', '(', ')', ')', ')', ')', '(', '(', ')', '(', '(', ')', '(', '(', ')', ')', '(', ')', ')', '(', '(', '('},
                {'(', ')', '(', '(', '(', '(', ')', ')', ')', '(', ')', '(', '(', ')', '(', '(', '(', ')', '(', ')', ')', ')', '(', '(', '(', ')', ')', ')', '(', ')', '(', '(', '(', ')', ')', '(', '(', ')', '(', '(', ')', ')', ')', '('},
                {')', ')', '(', '(', ')', ')', '(', '(', ')', '(', '(', '(', ')', ')', '(', ')', '(', ')', ')', ')', ')', ')', ')', '(', ')', ')', ')', '(', ')', '(', '(', ')', ')', ')', '(', '(', ')', ')', ')', ')', '(', ')', '(', '('},
                {'(', ')', ')', ')', '(', ')', ')', ')', '(', '(', ')', '(', '(', '(', ')', '(', '(', ')', '(', ')', '(', '(', '(', ')', ')', ')', '(', '(', ')', '(', '(', ')', '(', '(', '(', '(', ')', '(', '(', '(', '(', ')', '(', ')'},
                {')', '(', '(', ')', '(', ')', '(', ')', '(', '(', ')', ')', ')', ')', '(', ')', '(', '(', '(', '(', ')', '(', '(', ')', ')', ')', ')', ')', '(', '(', ')', '(', ')', '(', '(', ')', ')', ')', '(', ')', '(', '(', ')', '('},
                {'(', ')', ')', ')', '(', ')', ')', ')', '(', ')', ')', '(', '(', '(', '(', '(', '(', ')', '(', ')', ')', ')', '(', '(', '(', '(', '(', '(', '(', ')', '(', ')', ')', '(', '(', '(', '(', '(', '(', ')', '(', '(', ')', ')'}
        };
        assertTrue(solution.hasValidPath(grid));
    }
}